name: run-tests

on: [workflow_dispatch, push]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        dotnet-version: [ '6.0.x', '7.0.x', '8.0.x', '9.0.x' ]
        os: [ ubuntu-latest ]

    steps:
      - uses: actions/checkout@v4

      # Das SDK aus der Matrix aktiv setzen
      - name: Setup active .NET SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      # Alle SDKs installieren, damit Multi-Targeting (net6/7/8) funktioniert
      - name: Setup additional SDKs for multi-targeting
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            7.0.x
            8.0.x
            9.0.x

      - name: Install dependencies
        run: dotnet restore

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
            
      - name: 'Build project'
        run: dotnet build --configuration Release --no-restore  /p:TreatWarningsAsErrors=false

      - name: Static Code Analysis
        run: dotnet tool install --global dotnet-analyzer && dotnet-analyzer analyze src
        if: false # temporarily disable this step, there is more to be done here that this will work
  
      - name: Test project
        run: dotnet test --no-restore --verbosity normal 
